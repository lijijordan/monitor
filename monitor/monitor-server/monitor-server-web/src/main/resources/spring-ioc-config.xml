<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
      http://www.springframework.org/schema/beans
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context-4.0.xsd
      http://www.springframework.org/schema/aop
      http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />

	<context:component-scan base-package="com.monitor.server" />
	<context:annotation-config />
	<aop:aspectj-autoproxy />

	<context:property-placeholder location="classpath:db.properties" />

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${database.driverClassName}" />
		<property name="jdbcUrl" value="${database.url_base}" />
		<property name="user" value="${database.username}" />
		<property name="password" value="${database.password}" />
		<property name="initialPoolSize" value="${pool.initialPoolSize}" />
		<property name="minPoolSize" value="${pool.minPoolSize}" />
		<property name="maxPoolSize" value="${pool.maxPoolSize}" />
		<property name="maxIdleTime" value="${pool.maxIdleTime}" />
		<property name="acquireIncrement" value="${pool.acquireIncrement}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-mysql-config.xml"></property>
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 查找类路径下的映射器并自动创建成MapperFactoryBean,它将创建的代理类实现口,并且注入Spring -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.monitor.server.domain" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"> 
		<constructor-arg index="0" ref="sqlSessionFactory" /> </bean> -->

	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="txManager" />

	<!--使用jdk的实现 -->
	<bean id="ky.requestFactory"
		class="org.springframework.http.client.SimpleClientHttpRequestFactory">
		<property name="readTimeout" value="10000" />
		<property name="connectTimeout" value="5000" />
	</bean>

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="ky.requestFactory" />
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 定时运行的任务 -->
	<bean id="wxQuartzJob" class="com.monitor.server.service.task.WxQuartzJob"></bean>

	<!-- 定时获取Access_Token -->
	<bean id="jobtaskForToken"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<ref bean="wxQuartzJob" />
		</property>
		<!-- 定时获取微信Access_Token -->
		<property name="targetMethod">
			<value>getAccessToken_JsApiTicket</value>
		</property>

	</bean>

	<!-- 定义获取Access_Token的定时触发时间 -->
	<bean id="doTimeForToken"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<property name="jobDetail">
			<ref bean="jobtaskForToken" />
		</property>
		<property name="repeatInterval">
			<value>6600000</value>
		</property>
		<property name="startDelay">
			<value>8000</value>
		</property>
	</bean>

	<!-- 任务总管理类 -->
	<bean id="startQuertz" lazy-init="false" autowire="no"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="doTimeForToken" />
			</list>
		</property>
	</bean>

	<!-- 国际化信息资源工具类 ,静态变量不能autowired -->
	<bean id="messageSourceHelper" class="com.monitor.server.comm.MessageUtil">
		<property name="messageSource" ref="messageSource" />
	</bean>

	<!-- 绑定国际化信息资源 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 国际化信息所在的文件名 -->
		<property name="basename" value="messages" />
		<!-- 如果在国际化资源文件中找不到对应代码的信息，就用代码作为名称 -->
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

</beans>